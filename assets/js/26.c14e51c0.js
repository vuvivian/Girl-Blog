(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{629:function(t,e,v){"use strict";v.r(e);var _=v(5),r=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("div",{staticStyle:{width:"100%","font-size":"16px",color:"#d4226a",background:"#f5bebe",padding:"15px","border-radius":"4px"}},[t._v("\n你不必等到非常厉害，才敢开始;    你需要开始，才会变得非常厉害 。🤔️ 🤔️ 🤔️\n")]),t._v(" "),v("p",[t._v("🎈 如有补充或问题请提issues 🎏  我会及时回复~ "),v("br"),t._v("\n🎈 将会持续更新，给个Star 🌟 再走吧~")]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"🧚‍♀️-发展史"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#🧚‍♀️-发展史"}},[t._v("#")]),t._v(" 🧚‍♀️ 发展史")]),t._v(" "),v("blockquote",[v("p",[t._v("S1: 回调函数")])]),t._v(" "),v("ul",[v("li",[t._v("优点： 解决的同步的问题")]),t._v(" "),v("li",[t._v("缺点：回调地狱，不能 "),v("code",[t._v("tyr catch")]),t._v("捕获异常，不能  "),v("code",[t._v("return")])])]),t._v(" "),v("blockquote",[v("p",[t._v("S2：Promise")])]),t._v(" "),v("ul",[v("li",[t._v("优点: 解决了回调地狱")]),t._v(" "),v("li",[t._v("无法取消promise，错误需要通过回调函数来捕获")])]),t._v(" "),v("blockquote",[v("p",[t._v("S3：Generator")])]),t._v(" "),v("ul",[v("li",[t._v("可以控制函数的执行")])]),t._v(" "),v("blockquote",[v("p",[t._v("S4： Async 和 Await")])]),t._v(" "),v("ul",[v("li",[t._v("优点： 代码清晰，不用写一堆then，处理了回调地狱的问题")]),t._v(" "),v("li",[t._v("缺点：await将异步代码改造成同步代码，如果多个异步操作没有依赖性而使用await会导致性能上的降低")])]),t._v(" "),v("h3",{attrs:{id:"🧚‍♀️实现方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#🧚‍♀️实现方案"}},[t._v("#")]),t._v(" 🧚‍♀️实现方案")]),t._v(" "),v("blockquote",[v("p",[t._v("Q1: 手动实现 Promise")])]),t._v(" "),v("blockquote",[v("p",[t._v("Q2:  Async 和 Await 如何通过同步的方式实现异步")])])])}),[],!1,null,null,null);e.default=r.exports}}]);