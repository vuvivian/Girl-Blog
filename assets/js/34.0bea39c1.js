(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{636:function(s,n,a){"use strict";a.r(n);var r=a(5),e=Object(r.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticStyle:{width:"100%","font-size":"16px",color:"#d4226a",background:"#f5bebe",padding:"15px","border-radius":"4px"}},[s._v("\n你不必等到非常厉害，才敢开始;    你需要开始，才会变得非常厉害 。🤔️ 🤔️ 🤔️\n")]),s._v(" "),a("p",[s._v("🎈 如有补充或问题请提issues 🎏  我会及时回复~ "),a("br"),s._v("\n🎈 将会持续更新，给个Star 🌟 再走吧~")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[a("p",[s._v("含义\n函数的柯里化，是 Javascript 中函数式编程的一个重要概念。它返回的，是一个函数的函数。其实现方式，需要依赖参数以及递归，通过拆分参数的方式，来调用一个多参数的函数方法，以达到减少代码冗余，增加可读性的目的。")])]),s._v(" "),a("li",[a("p",[s._v("代码")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n\tfunction curry (fn, currArgs) {\n    return function() {\n        let args = [].slice.call(arguments);\n\n        // 首次调用时，若未提供最后一个参数currArgs，则不用进行args的拼接\n        if (currArgs !== undefined) {\n            args = args.concat(currArgs);\n        }\n\n        // 递归调用\n        if (args.length < fn.length) {\n            return curry(fn, args);\n        }\n\n        // 递归出口\n        return fn.apply(null, args);\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("首先，它有 2 个参数，fn 指的就是本文一开始的源处理函数 sum。currArgs 是调用 curry 时传入的参数列表，比如 (1, 2)(3) 这样的。")]),s._v(" "),a("p",[s._v("再看到 curry 函数内部，它会整个返回一个匿名函数。")]),s._v(" "),a("p",[s._v("再接下来的 let args = [].slice.call(arguments);，意思是将 arguments 数组化。arguments 是一个类数组的结构，它并不是一个真的数组，所以没法使用数组的方法。我们用了 call 的方法，就能愉快地对 args 使用数组的原生方法了。\ncurrArgs !== undefined 的判断，是为了解决递归调用时的参数拼接。")]),s._v(" "),a("p",[s._v("最后，判断 args 的个数，是否与 fn (也就是 sum )的参数个数相等，相等了就可以把参数都传给 fn，进行输出；否则，继续递归调用，直到两者相等。")]),s._v(" "),a("ul",[a("li",[s._v("应用")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tconst persons = [\n    { name: 'kevin', age: 4 },\n    { name: 'bob', age: 5 }\n];\n\n// 这里的 curry 函数，之前已实现\nconst getProp = curry(function (obj, index) {\n    const args = [].slice.call(arguments);\n    return obj[args[args.length - 1]];\n});\n\nconst ages = persons.map(getProp('age')); // [4, 5]\nconst names = persons.map(getProp('name')); // ['kevin', 'bob']\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);